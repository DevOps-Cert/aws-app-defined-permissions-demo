#
# This CloudFormation template is an edited version of the CloudFormation Serverless generated template.
# It generates the following resources only.
#
# API Gateway - Rest API
# DynamoDB - Table
# Lambda  - Functions
# IAM Roles and Lambda permissions to support the above components
#

AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Auth Blog

# Input parameters passed into the template
Parameters:

  CognitoUserPoolId:
    Description: Enter the Cognito user pool ID
    Type: String

  CognitoUserPoolArn:
    Description: Enter the Cognito user pool ARN
    Type: String

# Output values produced by the template
Outputs:

  ApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: RestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/Prod

  Region:
    Description: Region deployed to
    Value:
      Ref: AWS::Region

  TopicSubscriptionTable:
    Description: Topic subscription table
    Value:
      Ref: TopicSubscriptionDDBTable

# Resources created by the template
Resources:

  #
  # DynamoDB Tables
  #

  TopicSubscriptionDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: clientid
        AttributeType: S
      - AttributeName: topic
        AttributeType: S
      KeySchema:
      - AttributeName: clientid
        KeyType: HASH
      - AttributeName: topic
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  #
  # IAM Roles
  #

  # This is the role that is used as a template (see solution overview step "4")
  DefaultIoTRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Policies:
      - PolicyName: DefaultIoTPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowIoTConnect
            Effect: Allow
            Action: iot:Connect
            Resource: '*'
          - Sid: AllowIoTSubscribe
            Effect: Allow
            Action: iot:Subscribe
            Resource: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*
          - Sid: AllowIoTReceive
            Effect: Allow
            Action: iot:Receive
            Resource: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*

  # This is the role granted to PolicyGeneratorFunction when it runs
  PolicyGeneratorLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PolicyGeneratorLambdaPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowDDBTableRead
            Effect: Allow
            Action:
            - dynamodb:Query
            - dynamodb:GetItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TopicSubscriptionDDBTable}
          - Sid: AllowAssumingIoTRole
            Effect: Allow
            Action: sts:AssumeRole
            Resource: !GetAtt DefaultIoTRole.Arn
          - Sid: AllowListingCognitoUsers
            Effect: Allow
            Action: cognito-idp:ListUsers
            Resource: !Ref CognitoUserPoolArn
      - PolicyName: CustomResourceLambdaPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowRolePolicyUpdate
            Effect: Allow
            Action: iam:UpdateAssumeRolePolicy
            Resource: '*'

  #
  # Lambda Function
  #

  PolicyGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a custom IAM policy based on subscriptions recored in DynamoDB
      Runtime: python3.6
      MemorySize: 512
      Timeout: 200
      Role: !GetAtt PolicyGeneratorLambdaExecRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          IOT_ROLE: !Ref DefaultIoTRole
          SUBSCRIPTION_TABLE: !Ref TopicSubscriptionDDBTable
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os

          from boto3.dynamodb.conditions import Key, Attr
          from datetime import date, datetime

          print('Loading function')
          aws_region = os.environ['AWS_DEFAULT_REGION']
          dynamodb = boto3.resource('dynamodb')
          sts = boto3.client('sts')
          cognito = boto3.client('cognito-idp')

          subscription_table = dynamodb.Table(os.environ['SUBSCRIPTION_TABLE'])


          def respond(err, res=None):
              return {
                  'statusCode': err['code'] if err else '200',
                  'body': err['message'] if err else json.dumps(
                      res,
                      default=datetime_handler),
                  'headers': {
                      'Content-Type': 'application/json',
                  },
              }

          # json does not have a default datetime
          def datetime_handler(obj):
              if isinstance(obj, (datetime, date)):
                  return obj.isoformat()
              raise TypeError("Type {} not serializable".format(type(obj)))


          def lambda_handler(event, context):
              '''Scans the topic subscription dynamodb table and builds a
              custom IAM policy based on subscriptions.
              '''
              print("Received event: " + json.dumps(event, indent=2))
              print("Received context: " + str( vars(context) ))

              operation = event["http_method"]
              book = event["book"]
              acc_id = context.invoked_function_arn.split(":")[4]

              response = cognito.list_users(
                  UserPoolId=os.environ['COGNITO_USER_POOL_ID'],
                  Filter='sub = "{}"'.format(event["context"]["sub"])
              )
              print(response)

              client_id = response["Users"][0]["Username"]

              if operation == 'GET':
                  response = subscription_table.get_item(
                      Key={
                          'clientid' : client_id,
                          'topic' : book
                      }
                  )

                  print(response)
                  topic_policy = ''

                  # if no records are returned, deny access
                  if not response or "Item" not in response:
                      return respond({'code': '403', 'message': 'Forbidden'})
                  else:
                      topic = "arn:aws:iot:{}:{}:topic/{}".format(aws_region, acc_id, book)
                      topic_filter = "arn:aws:iot:{}:{}:topicfilter/{}".format(aws_region, acc_id, book)

                      # Create a policy
                      topic_policy = {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": "iot:Connect",
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": "iot:Subscribe",
                                  "Resource": topic_filter
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": "iot:Receive",
                                  "Resource": topic
                              }
                          ]
                      }
                      print(json.dumps(topic_policy))

                  assumed_role = sts.assume_role(
                      RoleArn='arn:aws:iam::{}:role/{}'.format(acc_id, os.environ['IOT_ROLE']),
                      RoleSessionName='{}_session'.format(client_id),
                      Policy=json.dumps(topic_policy)
                  )
                  temp_creds = assumed_role['Credentials']
                  temp_creds['Topics'] = book

                  return respond(None, temp_creds)
              else:
                  return respond({'code': '400', 'message': ValueError('Unsupported method "{}"'.format(operation))})
      Handler: index.lambda_handler

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - PolicyGeneratorFunction
    - DefaultIoTRole
    Properties:
      Description: Sets up the trust between Lambda execution role and default IoT role
      Runtime: python3.6
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt PolicyGeneratorLambdaExecRole.Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          IOT_ROLE: !Ref DefaultIoTRole
          POLICY_GENERATOR_FN: !Ref PolicyGeneratorFunction
          LAMBDA_EXEC_ROLE: !Ref PolicyGeneratorLambdaExecRole
      Code:
        ZipFile: !Sub |
          import boto3, json, os
          import cfnresponse

          def lambda_handler(event, context):
            print("Received event. Full parameters: {}".format(json.dumps(event)))
            iam = boto3.client('iam')
            trust_policy = {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Principal": {
                    "Service": "lambda.amazonaws.com",
                    "AWS": "arn:aws:sts::{}:assumed-role/{}/{}".format(
                      event["StackId"].split(":")[4],
                      os.environ['LAMBDA_EXEC_ROLE'],
                      os.environ['POLICY_GENERATOR_FN'])
                  }
                }
              ]}

            response = iam.update_assume_role_policy(
              PolicyDocument=json.dumps(trust_policy),
              RoleName=os.environ['IOT_ROLE']
            )

            print("Called IAM.update_assume_role_policy. result={}".format(json.dumps(response)))
            cfnresponse.send (event, context, cfnresponse.SUCCESS, {}, "CustomResourcePhysicalID")


  #
  # API Gateway APIs
  #

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      Description: Trade Book API
      Body:
        info:
          title:
            Ref: AWS::StackName
        paths:
          /getBookUpdateAccessToken:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers: {}
                  schema:
                    $ref: '#/definitions/Empty'
                '400':
                  description: 400 response
                  headers: {}
                  schema:
                    $ref: '#/definitions/Error'
                '403':
                  description: 403 response
                  headers: {}
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - serverless-auth-user-pool: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "{\n\t\"context\" : {\n\t\t\"sub\" : \"$context.authorizer.claims.sub\"\
                    },\n\t\"http_method\" : \"$context.httpMethod\",\n\t\"book\" :\
                    \ \"$input.params('book')\"\n}"
                responses:
                  '.*httpStatus'': ''400.*':
                    statusCode: '400'
                  '.*httpStatus'': ''403.*':
                    statusCode: '403'
                  default:
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PolicyGeneratorFunction.Arn}/invocations
        schemes:
        - https
        swagger: '2.0'

  #
  # Permission to allow API Gateway to invoke Lambda function
  #

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - RestApi
    - PolicyGeneratorFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PolicyGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/getBookUpdateAccessToken

  #
  # Custom CloudFormation resource to update trust policy between lambda execution role and default IoT role
  #
  UpdateTrustPolicy:
    Type: Custom::UpdateTrust
    DependsOn:
    - PolicyGeneratorFunction
    - DefaultIoTRole
    - CustomResourceLambda
    Properties:
      Region:
        Ref: AWS::Region
      ServiceToken:
        Fn::GetAtt: CustomResourceLambda.Arn
