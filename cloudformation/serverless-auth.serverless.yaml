AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Auth Blog
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  CertificateId:
    Type: String
    Description: Enter the certificate Id for the IoT thing

Resources:
  TopicSubscriptionDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: clientid
        AttributeType: S
      - AttributeName: topic
        AttributeType: S
      KeySchema:
      - AttributeName: clientid
        KeyType: HASH
      - AttributeName: topic
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: serverless-auth-user-pool

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: "serverless-auth-poc"
      UserPoolId: !Ref CognitoUserPool

  IoTThing:
    Type: "AWS::IoT::Thing"
    Properties:
      ThingName: "serverless-auth-iot-thing"

  IoTPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iot:Connect"
              - "iot:Publish"
              - "iot:Subscribe"
              - "iot:Receive"
            Resource:
              - "*"

  PolicyPrincipalAttachment:
    Type: "AWS::IoT::PolicyPrincipalAttachment"
    Properties:
      PolicyName:
        Ref: IoTPolicy
      Principal:
        !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/${CertificateId}

  ThingPrincipalAttachment:
    Type: "AWS::IoT::ThingPrincipalAttachment"
    Properties:
      Principal:
        !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/${CertificateId}
      ThingName:
        Ref: IoTThing

  DefaultIoTRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "IoTConnect"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowIoTConnect"
                Effect: "Allow"
                Action:
                  - "iot:Connect"
                Resource: "*"
        -
          PolicyName: "IoTSubscribe"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowIoTSubscribe"
                Effect: "Allow"
                Action:
                  - "iot:Subscribe"
                Resource:
                  !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*"
        -
          PolicyName: "IoTReceive"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowIoTReceive"
                Effect: "Allow"
                Action:
                  - "iot:Receive"
                Resource:
                  !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"

  SubscriptionLambdaExecRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "ReadWriteSubscriptionDDBTable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowDDBTableAccess"
                Effect: "Allow"
                Action:
                  -  "dynamodb:*Item"
                  -  "dynamodb:Query"
                  -  "dynamodb:Scan"
                Resource:
                  !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TopicSubscriptionDDBTable}"

  PolicyGeneratorLambdaExecRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaWriteCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowLogging"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "ReadSubscriptionDDBTable"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowDDBTableRead"
                Effect: "Allow"
                Action:
                  -  "dynamodb:Query"
                  - "dynamodb:GetItem"
                Resource:
                  !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TopicSubscriptionDDBTable}"
        -
          PolicyName: "AssumeIoTRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowAssumingIoTRole"
                Effect: "Allow"
                Action:
                  -  "sts:AssumeRole"
                Resource:
                  !GetAtt DefaultIoTRole.Arn
        -
          PolicyName: "ListCognitoUsers"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "AllowListingCognitoUsers"
                Effect: "Allow"
                Action:
                  -  "cognito-idp:ListUsers"
                Resource:
                  !GetAtt CognitoUserPool.Arn

# ---------------------------------------------------------------------------------------------------------------------
# Lambda Functions
# ---------------------------------------------------------------------------------------------------------------------
  TopicSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        ../lambda-functions
      Description: "Updates DynamoDB table with topic subscriptions for a user"
      Handler: subscribe-topic.lambda_handler
      MemorySize: 256
      Timeout: 200
      Role:
        !GetAtt SubscriptionLambdaExecRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          SUBSCRIPTION_TABLE: !Ref TopicSubscriptionDDBTable
      Events:
        SubscribeApi:
          Type: Api
          Properties:
            Path: /subscribe
            Method: ANY
            RestApiId:
              Ref: RestApi

  PolicyGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        ../lambda-functions
      Description: "Generates a custom IAM policy based on subscriptions recored in DynamoDB"
      Handler: generate-policy.lambda_handler
      MemorySize: 512
      Timeout: 200
      Role:
        !GetAtt PolicyGeneratorLambdaExecRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          SUBSCRIPTION_TABLE: !Ref TopicSubscriptionDDBTable
          IOT_ROLE: !Ref DefaultIoTRole
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Events:
        PolicyApi:
          Type: Api
          Properties:
            Path: /policy
            Method: GET
            RestApiId:
              Ref: RestApi

  SubscriptionLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - TopicSubscriptionFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/${RestApi}/*

  PolicyLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - PolicyGeneratorFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/${RestApi}/*

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: Prod
        DefinitionBody:
          swagger: "2.0"
          info:
            title:
              Ref: AWS::StackName
          schemes:
          - "https"
          paths:
            /policy:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers: {}
                  "400":
                    description: "400 response"
                    schema:
                      $ref: "#/definitions/Error"
                    headers: {}
                  "403":
                    description: "403 response"
                    schema:
                      $ref: "#/definitions/Error"
                    headers: {}
                security:
                - serverless-auth-user-pool: []
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                    ".*httpStatus': '400.*":
                      statusCode: "400"
                    ".*httpStatus': '403.*":
                      statusCode: "403"
                  requestTemplates:
                    application/json: "{\n\t\"context\" : {\n\t\t\"sub\" : \"$context.authorizer.claims.sub\"}\
                      ,\n\t\"http_method\" : \"$context.httpMethod\"\
                      ,\n\t\"book\" : \"$input.params('book')\"\n}"
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PolicyGeneratorFunction.Arn}/invocations
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
            /subscribe:
              x-amazon-apigateway-any-method:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers: {}
                  "400":
                    description: "400 response"
                    schema:
                      $ref: "#/definitions/Error"
                    headers: {}
                  "403":
                    description: "403 response"
                    schema:
                      $ref: "#/definitions/Error"
                    headers: {}
                security:
                - serverless-auth-user-pool: []
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                    ".*httpStatus': '400.*":
                      statusCode: "400"
                  requestTemplates:
                    application/json: "{\n\t\"sub\" : \"$context.authorizer.claims.sub\"\
                      ,\n\t\"http_method\" : \"$context.httpMethod\"\
                      ,\n\t\"body\" : $input.json('$')\n}"
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TopicSubscriptionFunction.Arn}/invocations
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
          securityDefinitions:
            serverless-auth-user-pool:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                providerARNs:
                  - Fn::Sub: ${CognitoUserPool.Arn}
                type: "cognito_user_pools"

Outputs:
  Region:
    Description: Region deployed to
    Value:
      Ref: AWS::Region
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref RestApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
  CognitoUserPoolId:
    Description: Cognito User pool
    Value:
      Ref: "CognitoUserPool"
  CognitoUserPoolClientId:
    Value:
      Ref: "CognitoUserPoolClient"
  TopicSubscriptionTable:
    Description: Topic subscription table
    Value:
      Ref: "TopicSubscriptionDDBTable"
  IoTThing:
    Description: IoT thing to test subscriptions
    Value:
      Ref: "IoTThing"
  IoTCertificate:
    Description: IoT certificate
    Value:
      Ref: "CertificateId"
